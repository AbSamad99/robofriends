{"version":3,"sources":["actionTypes.js","reducers.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","serviceWorker.js","index.js"],"names":["actionTypes","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_FAILED","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Header","nextProps","nextState","className","Component","Card","id","name","email","src","alt","CardList","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b739cf3e.chunk.js","sourcesContent":["const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nconst REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nconst REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nconst REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\nconst actionTypes = {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n};\r\n\r\nexport default actionTypes;\r\n","import actionTypes from './actionTypes';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.CHANGE_SEARCH_FIELD:\r\n      return {\r\n        ...state,\r\n        searchField: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true,\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.REQUEST_ROBOTS_PENDING:\r\n      return {\r\n        ...state,\r\n        isPending: true,\r\n      };\r\n\r\n    case actionTypes.REQUEST_ROBOTS_FAILED:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPending: false,\r\n      };\r\n\r\n    case actionTypes.REQUEST_ROBOTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        robots: action.payload,\r\n        isPending: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return <h1 className=\"f1\">RoboFriends</h1>;\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Card =({id,name,email}) => {\r\n  return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2 '>\r\n      <img src={`https://robohash.org/${id}?size=250x250`} alt='jane-doe' />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox=({searchChange}) => {\r\n  return (\r\n    <input\r\n      className='pa3 ba b--green bg-lightest-blue ma3'\r\n      type='search'\r\n      placeholder='search robots'\r\n      onChange={searchChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll=(props) => {\r\n  return(\r\n    <div style={{overflowY:'scroll',border:'2px solid #9FCFB8',height:'500px'}}>\r\n    {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      hasError:false\r\n    }\r\n  }\r\ncomponentDidCatch(error,info){\r\n  this.setState({hasError:true})\r\n}\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n        return <h1>Oops, thats not good</h1>\r\n    }\r\n      return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBox from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, robots, onSearchChange } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    if (robots.length === 0) {\r\n      return <h1 className=\"tc f1\">Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBox>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBox>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error,\r\n});\r\n\r\nconst mapDisapatchToProps = (dispatch) => ({\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDisapatchToProps)(App);\r\n","import actionTypes from './actionTypes';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: actionTypes.CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: actionTypes.REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) =>\r\n      dispatch({ type: actionTypes.REQUEST_ROBOTS_SUCCESS, payload: data })\r\n    )\r\n    .catch((err) =>\r\n      dispatch({ type: actionTypes.REQUEST_ROBOTS_FAILED, payload: err })\r\n    );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}