{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","Robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sOAYeA,EAVH,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACpB,OACE,yBAAKC,UAAU,wDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,aACzD,4BAAKJ,GACL,2BAAIC,KCOKI,EAXA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAEhF,OACE,6BACGM,ICIQK,EAXC,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACE,2BACEX,UAAU,uCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,KCEDI,G,MARF,SAACC,GACZ,OACE,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,oBAAoBC,OAAO,UACjEJ,EAAMK,YCgBIC,E,kDAlBb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTC,UAAS,GAHA,E,8DAMGC,EAAMC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAItB,OAAGG,KAAKJ,MAAMC,SACH,oDAEFG,KAAKX,MAAMK,a,GAfGQ,aC+CZC,E,kDAzCb,aAAc,IAAD,8BACX,gBAaFC,eAAe,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAbxC,EAAKZ,MAAM,CACTnB,OAAO,GACP6B,YAAY,IAJH,E,gEAQO,IAAD,OACjBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACxB,OAAOoC,S,+BAO7B,IAAD,OACAC,EAAed,KAAKJ,MAAMnB,OAAOsC,QAAO,SAACtC,GAC7C,OAAOA,EAAON,KAAK6C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAEnE,OAA8B,IAA3BhB,KAAKJ,MAAMnB,OAAOyC,OACZ,wBAAI7C,UAAU,SAAd,WAIL,yBAAKA,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQqC,W,GAjCRZ,aCGZiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThB,MAAK,SAACoB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACf+B,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAACxC,GACNsC,QAAQtC,MAAM,4CAA6CA,M,MC/DjEyC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,gBAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,gBAAN,sBAEPzB,EAwCV,SAAiCO,GAE/BjB,MAAMiB,GACHhB,MAAK,SAACC,GAGiB,MAApBA,EAASoC,SACuD,IAAhEpC,EAASqC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMzC,MAAK,SAACoB,GAClCA,EAAasB,aAAa1C,MAAK,WAC7BW,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEA5DAiB,CAAwB5B,GAGxBD,EAAgBC,OC/BxB6B,I","file":"static/js/main.05e6bad3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({id,name,email}) => {\r\n  return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2 '>\r\n      <img src={`https://robohash.org/${id}?size=250x250`} alt='jane-doe' />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({Robots}) => {\r\n  const cardArray=Robots.map((user,i) => {\r\n    return <Card key={i} id={Robots[i].id} name={Robots[i].name} email={Robots[i].email}/>\r\n  })\r\n  return(\r\n    <div>\r\n      {cardArray}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox=({searchChange}) => {\r\n  return (\r\n    <input\r\n      className='pa3 ba b--green bg-lightest-blue ma3'\r\n      type='search'\r\n      placeholder='search robots'\r\n      onChange={searchChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll=(props) => {\r\n  return(\r\n    <div style={{overflowY:'scroll',border:'2px solid #9FCFB8',height:'500px'}}>\r\n    {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      hasError:false\r\n    }\r\n  }\r\ncomponentDidCatch(error,info){\r\n  this.setState({hasError:true})\r\n}\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n        return <h1>Oops, thats not good</h1>\r\n    }\r\n      return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBox from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      Robots:[],\r\n      searchField:''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(users=> this.setState({Robots:users}))\r\n  }\r\n\r\n  onSearchChange=(event)=> {\r\n    this.setState({searchField:event.target.value})\r\n  }\r\n\r\n  render(){\r\n    const filteredRobots=this.state.Robots.filter((Robots) => {\r\n      return Robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n    })\r\n    if(this.state.Robots.length===0){\r\n      return <h1 className='tc f1'>Loading</h1>\r\n    }\r\n    else{\r\n      return(\r\n        <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n        <ErrorBox>\r\n        <CardList Robots={filteredRobots} />\r\n        </ErrorBox>\r\n        </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}